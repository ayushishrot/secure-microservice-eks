name: Build and Deploy Docker Image to EKS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

  workflow_dispatch:
    inputs:
      rollback_revision:
        description: 'Helm revision number to rollback to'
        required: false
        default: '0'  # If not provided, will rollback to previous version

env:
  CLUSTER_NAME: cluster
  NAMESPACE: web-app
  RELEASE_NAME: web-app-release
  REPOSITORY_NAME: web-app/web-app
  WORKING_DIRECTORY: web-app

jobs:
  # Static Code Analysis
  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: Run tests (if available)
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          if [ -d "src/__tests__" ] || [ -d "test" ] || [ -d "tests" ]; then
            npm test || true
          else
            echo "No tests found, skipping test execution"
          fi

      - name: Run Semgrep
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          python -m pip install semgrep
          semgrep --config=auto --json --output=semgrep-results.json ./${{ env.WORKING_DIRECTORY }}
          semgrep --config=auto --sarif --output=semgrep-results.sarif ./${{ env.WORKING_DIRECTORY }}
          
      - name: Upload Semgrep results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep-results.sarif
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: SonarQube Scan
        working-directory: ${{ env.WORKING_DIRECTORY }}
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  # Secrets Scanning
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          
          COMMIT_COUNT=$(git rev-list --count HEAD)
          
          if [ "$COMMIT_COUNT" -gt 1 ]; then
            echo "Scanning git history with TruffleHog..."
            trufflehog git file://. --since-commit HEAD~1 --only-verified --no-update --json > trufflehog-results.json || true
          else
            echo "Single commit detected, scanning filesystem with TruffleHog..."
            trufflehog filesystem . --only-verified --no-update --json > trufflehog-results.json || true
          fi
          
          # Optional: Upload results as artifact
          if [ -s trufflehog-results.json ]; then
            echo "Secrets found! Check the artifacts."
          fi
  
  # Docker Security Analysis
  docker-security:
    name: Docker Security Scan with Trivy
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    needs: [static-analysis, secrets-scan]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        id: build
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.REPOSITORY_NAME }}:$IMAGE_TAG ./web-app/

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: $ECR_REGISTRY/${{ env.REPOSITORY_NAME }}:$IMAGE_TAG
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Security Gate - Only proceed if all security checks pass
  security-gate:
    name: Security Gate Blocker
    runs-on: ubuntu-latest
    needs: [static-analysis, secrets-scan, docker-security]
    if: always()
    steps:
      - name: Check Security Status
        run: |
          if [[ "${{ needs.static-analysis.result }}" != "success" ]]; then
            echo "❌ Static analysis failed"
            exit 1
          fi
          if [[ "${{ needs.secrets-scan.result }}" != "success" ]]; then
            echo "❌ Secrets scan failed"
            exit 1
          fi
          if [[ "${{ needs.docker-security.result }}" != "success" ]]; then
            echo "❌ Docker security scan failed"
            exit 1
          fi
          echo "✅ All security gates passed"

  build-and-deploy:
    name: Build and Deploy to EKS
    runs-on: ubuntu-latest
    needs: [security-gate]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Image Tag
        id: image_tag
        run: echo "tag=${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.REPOSITORY_NAME }}:$IMAGE_TAG ./web-app/
          docker push $ECR_REGISTRY/${{ env.REPOSITORY_NAME }}:$IMAGE_TAG

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Helm Lint
        run: helm lint ./helm

      - name: Get EFS File System ID
        id: get-efs-id
        run: |
          EFS_ID=$(aws efs describe-file-systems --query "FileSystems[0].FileSystemId" --region ${{ secrets.AWS_REGION }} --output text)
          echo "EFS_ID=$EFS_ID" >> $GITHUB_ENV

      - name: Deploy Helm Chart
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          EFS_ID: ${{ env.EFS_ID }}
        run: |
          helm upgrade --install ${{ env.RELEASE_NAME }} ./helm \
            --namespace ${{ env.NAMESPACE }} --create-namespace \
            --set image.repository=$ECR_REGISTRY/${{ env.REPOSITORY_NAME }} \
            --set image.tag=$IMAGE_TAG \
            --set efs.fileSystemId=$EFS_ID

      - name: Show Helm Deployment History
        run: |
          helm history ${{ env.RELEASE_NAME }} -n ${{ env.NAMESPACE }}

  rollback:
    name: Manual Helm Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Rollback Helm Release
        run: |
          if [ "${{ github.event.inputs.rollback_revision }}" != "0" ]; then
            echo "Rolling back to revision ${{ github.event.inputs.rollback_revision }}..."
            helm rollback ${{ env.RELEASE_NAME }} ${{ github.event.inputs.rollback_revision }} --namespace ${{ env.NAMESPACE }}
          else
            echo "Rolling back to previous revision..."
            helm rollback ${{ env.RELEASE_NAME }} --namespace ${{ env.NAMESPACE }}
          fi

      - name: Show Helm Deployment History
        run: |
          helm history ${{ env.RELEASE_NAME }} -n ${{ env.NAMESPACE }}
